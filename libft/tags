!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
AR	Makefile	/^AR      = 	ar$/;"	m
ARFLAGS	Makefile	/^ARFLAGS = 	rcs$/;"	m
BUFF_SIZE	includes/libft.h	/^# define BUFF_SIZE /;"	d
CC	Makefile	/^CC      = 	gcc$/;"	m
CFLAGS	Makefile	/^CFLAGS  = 	-Wall -Wextra -Werror$/;"	m
DIR	Makefile	/^DIR		= srcs$/;"	m
HEADERS	Makefile	/^HEADERS = .\/includes$/;"	m
LIBFT_H	includes/libft.h	/^# define LIBFT_H$/;"	d
NAME	Makefile	/^NAME	= libft.a$/;"	m
OBJECTS	Makefile	/^OBJECTS = $(SRCS:.c=.o)$/;"	m
SRC	Makefile	/^SRC		= $(addprefix $(DIR)\/,$(SRCS))$/;"	m
SRCS	Makefile	/^SRCS	=															\\$/;"	m
content	includes/libft.h	/^	void		*content;$/;"	m	struct:s_list
content_size	includes/libft.h	/^	size_t		content_size;$/;"	m	struct:s_list
ft_abs	srcs/ft_abs.c	/^int	ft_abs(int n)$/;"	f
ft_add_to_tab	srcs/ft_strsplit.c	/^static char		*ft_add_to_tab(char *tab, char const *field, char c)$/;"	f	file:
ft_atoi	srcs/ft_atoi.c	/^int				ft_atoi(const char *str)$/;"	f
ft_bzero	srcs/ft_bzero.c	/^void	ft_bzero(void *s, size_t n)$/;"	f
ft_count_field	srcs/ft_strsplit.c	/^static size_t	ft_count_field(char const *s, char c)$/;"	f	file:
ft_field_len	srcs/ft_strsplit.c	/^static size_t	ft_field_len(char const *s, char c)$/;"	f	file:
ft_freetab	srcs/ft_freetab.c	/^void	ft_freetab(char **tab)$/;"	f
ft_getnline	srcs/ft_getnline.c	/^int	ft_getnline(char *str)$/;"	f
ft_isalnum	srcs/ft_isalnum.c	/^int		ft_isalnum(int c)$/;"	f
ft_isalpha	srcs/ft_isalpha.c	/^int		ft_isalpha(int c)$/;"	f
ft_isascii	srcs/ft_isascii.c	/^int		ft_isascii(int c)$/;"	f
ft_isdigit	srcs/ft_isdigit.c	/^int		ft_isdigit(int c)$/;"	f
ft_isprint	srcs/ft_isprint.c	/^int		ft_isprint(int c)$/;"	f
ft_isspace	srcs/ft_isspace.c	/^int	ft_isspace(int c)$/;"	f
ft_itoa	srcs/ft_itoa.c	/^char		*ft_itoa(int n)$/;"	f
ft_lstadd	srcs/ft_lstadd.c	/^void			ft_lstadd(t_list **alst, t_list *new)$/;"	f
ft_lstdel	srcs/ft_lstdel.c	/^void			ft_lstdel(t_list **alst, void (*del)(void *, size_t))$/;"	f
ft_lstdelone	srcs/ft_lstdelone.c	/^void	ft_lstdelone(t_list **alst, void (*del)(void *, size_t))$/;"	f
ft_lstiter	srcs/ft_lstiter.c	/^void			ft_lstiter(t_list *lst, void (*f)(t_list *elem))$/;"	f
ft_lstlen	srcs/ft_lstlen.c	/^size_t	ft_lstlen(t_list *lst)$/;"	f
ft_lstmap	srcs/ft_lstmap.c	/^t_list			*ft_lstmap(t_list *lst, t_list *(*f)(t_list *elem))$/;"	f
ft_lstnew	srcs/ft_lstnew.c	/^t_list	*ft_lstnew(void const *content, size_t content_size)$/;"	f
ft_memalloc	srcs/ft_memalloc.c	/^void	*ft_memalloc(size_t size)$/;"	f
ft_memccpy	srcs/ft_memccpy.c	/^void	*ft_memccpy(void *dst, const void *src, int c, size_t n)$/;"	f
ft_memchr	srcs/ft_memchr.c	/^void	*ft_memchr(const void *s, int c, size_t n)$/;"	f
ft_memcmp	srcs/ft_memcmp.c	/^int		ft_memcmp(const void *s1, const void *s2, size_t n)$/;"	f
ft_memcpy	srcs/ft_memcpy.c	/^void	*ft_memcpy(void *dst, const void *src, size_t n)$/;"	f
ft_memdel	srcs/ft_memdel.c	/^void	ft_memdel(void **ap)$/;"	f
ft_memmove	srcs/ft_memmove.c	/^void	*ft_memmove(void *dst, const void *src, size_t len)$/;"	f
ft_memset	srcs/ft_memset.c	/^void	*ft_memset(void *b, int c, size_t len)$/;"	f
ft_node	srcs/get_next_line.c	/^static t_list	*ft_node(t_list **list, int fd)$/;"	f	file:
ft_putchar	srcs/ft_putchar.c	/^void	ft_putchar(char c)$/;"	f
ft_putchar_fd	srcs/ft_putchar_fd.c	/^void	ft_putchar_fd(char c, int fd)$/;"	f
ft_putendl	srcs/ft_putendl.c	/^void	ft_putendl(char const *s)$/;"	f
ft_putendl_fd	srcs/ft_putendl_fd.c	/^void	ft_putendl_fd(char const *s, int fd)$/;"	f
ft_putnbr	srcs/ft_putnbr.c	/^void	ft_putnbr(int n)$/;"	f
ft_putnbr_fd	srcs/ft_putnbr_fd.c	/^void	ft_putnbr_fd(int n, int fd)$/;"	f
ft_putstr	srcs/ft_putstr.c	/^void	ft_putstr(char const *s)$/;"	f
ft_putstr_fd	srcs/ft_putstr_fd.c	/^void	ft_putstr_fd(char const *s, int fd)$/;"	f
ft_read	srcs/get_next_line.c	/^char			*ft_read(char **buf, int fd, char *ptr)$/;"	f
ft_strcat	srcs/ft_strcat.c	/^char	*ft_strcat(char *s1, const char *s2)$/;"	f
ft_strchr	srcs/ft_strchr.c	/^char	*ft_strchr(const char *s, int c)$/;"	f
ft_strclr	srcs/ft_strclr.c	/^void	ft_strclr(char *s)$/;"	f
ft_strcmp	srcs/ft_strcmp.c	/^int		ft_strcmp(const char *s1, const char *s2)$/;"	f
ft_strcpy	srcs/ft_strcpy.c	/^char	*ft_strcpy(char *dst, const char *src)$/;"	f
ft_strdel	srcs/ft_strdel.c	/^void	ft_strdel(char **as)$/;"	f
ft_strdup	srcs/ft_strdup.c	/^char	*ft_strdup(const char *s1)$/;"	f
ft_strequ	srcs/ft_strequ.c	/^int		ft_strequ(char const *s1, char const *s2)$/;"	f
ft_striter	srcs/ft_striter.c	/^void	ft_striter(char *s, void (*f)(char *))$/;"	f
ft_striteri	srcs/ft_striteri.c	/^void	ft_striteri(char *s, void (*f)(unsigned int, char *))$/;"	f
ft_strjoin	srcs/ft_strjoin.c	/^char	*ft_strjoin(char const *s1, char const *s2)$/;"	f
ft_strlcat	srcs/ft_strlcat.c	/^size_t	ft_strlcat(char *dst, const char *src, size_t size)$/;"	f
ft_strlen	srcs/ft_strlen.c	/^size_t	ft_strlen(const char *s)$/;"	f
ft_strmap	srcs/ft_strmap.c	/^char	*ft_strmap(char const *s, char (*f)(char))$/;"	f
ft_strmapi	srcs/ft_strmapi.c	/^char	*ft_strmapi(char const *s, char (*f)(unsigned int, char))$/;"	f
ft_strncat	srcs/ft_strncat.c	/^char	*ft_strncat(char *s1, const char *s2, size_t n)$/;"	f
ft_strncmp	srcs/ft_strncmp.c	/^int		ft_strncmp(const char *s1, const char *s2, size_t n)$/;"	f
ft_strncpy	srcs/ft_strncpy.c	/^char	*ft_strncpy(char *dst, const char *src, size_t len)$/;"	f
ft_strnequ	srcs/ft_strnequ.c	/^int		ft_strnequ(char const *s1, char const *s2, size_t n)$/;"	f
ft_strnew	srcs/ft_strnew.c	/^char	*ft_strnew(size_t size)$/;"	f
ft_strnstr	srcs/ft_strnstr.c	/^char	*ft_strnstr(const char *big, const char *little, size_t len)$/;"	f
ft_strrchr	srcs/ft_strrchr.c	/^char	*ft_strrchr(const char *s, int c)$/;"	f
ft_strrev	srcs/ft_strrev.c	/^char	*ft_strrev(char *str)$/;"	f
ft_strsplit	srcs/ft_strsplit.c	/^char			**ft_strsplit(char const *s, char c)$/;"	f
ft_strstr	srcs/ft_strstr.c	/^char	*ft_strstr(const char *big, const char *little)$/;"	f
ft_strsub	srcs/ft_strsub.c	/^char	*ft_strsub(char const *s1, unsigned int start, size_t len)$/;"	f
ft_strtrim	srcs/ft_strtrim.c	/^char	*ft_strtrim(char const *s)$/;"	f
ft_tolower	srcs/ft_tolower.c	/^int		ft_tolower(int c)$/;"	f
ft_toupper	srcs/ft_toupper.c	/^int		ft_toupper(int c)$/;"	f
get_next_line	srcs/get_next_line.c	/^int				get_next_line(const int fd, char **line)$/;"	f
labs	srcs/ft_labs.c	/^long int	labs(long int n)$/;"	f
next	includes/libft.h	/^	t_list		*next;$/;"	m	struct:s_list
s_list	includes/libft.h	/^struct			s_list$/;"	s
t_list	includes/libft.h	/^typedef struct s_list	t_list;$/;"	t	typeref:struct:s_list
